"Content"
"    #ifndef EXECUTION_TIMER_H&#xD;&#xA;    #define EXECUTION_TIMER_H&#xD;&#xA;    &#xD;&#xA;    #include <chrono>&#xD;&#xA;    #include <type_traits>&#xD;&#xA;    #include <sstream>&#xD;&#xA;    #include <iostream>&#xD;&#xA;    &#xD;&#xA;    template <class Resolution = std::chrono::milliseconds>&#xD;&#xA;    class ExecutionTimer {&#xD;&#xA;    public:&#xD;&#xA;    	using Clock = std::conditional_t<std::chrono::high_resolution_clock::is_steady,&#xD;&#xA;    		std::chrono::high_resolution_clock,&#xD;&#xA;    		std::chrono::steady_clock>;&#xD;&#xA;    &#xD;&#xA;    private:&#xD;&#xA;    	const Clock::time_point mStart = Clock::now();&#xD;&#xA;    &#xD;&#xA;    public:&#xD;&#xA;    	ExecutionTimer() = default;&#xD;&#xA;    	~ExecutionTimer() {&#xD;&#xA;    		const auto end = Clock::now();&#xD;&#xA;    		std::ostringstream strStream;&#xD;&#xA;    		strStream << """"""""Destructor Elapsed: """"""""&#xD;&#xA;    			<< std::chrono::duration_cast<Resolution>(end - mStart).count()&#xD;&#xA;    			<< std::endl;&#xD;&#xA;    		std::cout << strStream.str() << std::endl;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	inline void stop() {&#xD;&#xA;    		const auto end = Clock::now();&#xD;&#xA;    		std::ostringstream strStream;&#xD;&#xA;    		strStream << """"""""Stop Elapsed: """"""""&#xD;&#xA;    			<< std::chrono::duration_cast<Resolution>(end - mStart).count()&#xD;&#xA;    			<< std::endl;&#xD;&#xA;    		std::cout << strStream.str() << std::endl;&#xD;&#xA;    	}&#xD;&#xA;    };&#xD;&#xA;    &#xD;&#xA;    #endif // !EXECUTION_TIMER_H"
