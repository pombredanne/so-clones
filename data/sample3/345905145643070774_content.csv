"Content"
"    public static class Helper&#xD;&#xA;    {&#xD;&#xA;        &#xD;&#xA;        public static List<T> DataTableToList<T>(this DataTable dataTable) where T : new()&#xD;&#xA;        {&#xD;&#xA;            var dataList = new List<T>();&#xD;&#xA;            //Define what attributes to be read from the class&#xD;&#xA;            const System.Reflection.BindingFlags flags = System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance;&#xD;&#xA;            //Read Attribute Names and Types&#xD;&#xA;            var objFieldNames = typeof(T).GetProperties(flags).Cast<System.Reflection.PropertyInfo>().&#xD;&#xA;                Select(item => new&#xD;&#xA;                {&#xD;&#xA;                    Name = item.Name,&#xD;&#xA;                    Type = Nullable.GetUnderlyingType(item.PropertyType) ?? item.PropertyType&#xD;&#xA;                }).ToList();&#xD;&#xA;            //Read Datatable column names and types&#xD;&#xA;            var dtlFieldNames = dataTable.Columns.Cast<DataColumn>().&#xD;&#xA;                Select(item => new&#xD;&#xA;                {&#xD;&#xA;                    Name = item.ColumnName,&#xD;&#xA;                    Type = item.DataType&#xD;&#xA;                }).ToList();&#xD;&#xA;            foreach (DataRow dataRow in dataTable.AsEnumerable().ToList())&#xD;&#xA;            {&#xD;&#xA;                var classObj = new T();&#xD;&#xA;                foreach (var dtField in dtlFieldNames)&#xD;&#xA;                {&#xD;&#xA;                    System.Reflection.PropertyInfo propertyInfos = classObj.GetType().GetProperty(dtField.Name);&#xD;&#xA;                    var field = objFieldNames.Find(x => x.Name == dtField.Name);&#xD;&#xA;                    if (field != null)&#xD;&#xA;                    {&#xD;&#xA;                        &#xD;&#xA;                        if (propertyInfos.PropertyType == typeof(DateTime))&#xD;&#xA;                        {&#xD;&#xA;                            propertyInfos.SetValue&#xD;&#xA;                            (classObj, convertToDateTime(dataRow[dtField.Name]), null);&#xD;&#xA;                        }&#xD;&#xA;                        else if (propertyInfos.PropertyType == typeof(Nullable<DateTime>))&#xD;&#xA;                        {&#xD;&#xA;                            propertyInfos.SetValue&#xD;&#xA;                            (classObj, convertToDateTime(dataRow[dtField.Name]), null);&#xD;&#xA;                        }&#xD;&#xA;                        else if (propertyInfos.PropertyType == typeof(int))&#xD;&#xA;                        {&#xD;&#xA;                            propertyInfos.SetValue&#xD;&#xA;                            (classObj, ConvertToInt(dataRow[dtField.Name]), null);&#xD;&#xA;                        }&#xD;&#xA;                        else if (propertyInfos.PropertyType == typeof(long))&#xD;&#xA;                        {&#xD;&#xA;                            propertyInfos.SetValue&#xD;&#xA;                            (classObj, ConvertToLong(dataRow[dtField.Name]), null);&#xD;&#xA;                        }&#xD;&#xA;                        else if (propertyInfos.PropertyType == typeof(decimal))&#xD;&#xA;                        {&#xD;&#xA;                            propertyInfos.SetValue&#xD;&#xA;                            (classObj, ConvertToDecimal(dataRow[dtField.Name]), null);&#xD;&#xA;                        }&#xD;&#xA;                        else if (propertyInfos.PropertyType == typeof(String))&#xD;&#xA;                        {&#xD;&#xA;                            if (dataRow[dtField.Name].GetType() == typeof(DateTime))&#xD;&#xA;                            {&#xD;&#xA;                                propertyInfos.SetValue&#xD;&#xA;                                (classObj, ConvertToDateString(dataRow[dtField.Name]), null);&#xD;&#xA;                            }&#xD;&#xA;                            else&#xD;&#xA;                            {&#xD;&#xA;                                propertyInfos.SetValue&#xD;&#xA;                                (classObj, ConvertToString(dataRow[dtField.Name]), null);&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                        else&#xD;&#xA;                        {&#xD;&#xA;                             &#xD;&#xA;                            propertyInfos.SetValue&#xD;&#xA;                                (classObj, Convert.ChangeType(dataRow[dtField.Name], propertyInfos.PropertyType), null);&#xD;&#xA;                             &#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                dataList.Add(classObj);&#xD;&#xA;            }&#xD;&#xA;            return dataList;&#xD;&#xA;        }&#xD;&#xA;        private static string ConvertToDateString(object date)&#xD;&#xA;        {&#xD;&#xA;            if (date == null)&#xD;&#xA;                return string.Empty;&#xD;&#xA;            return date == null ? string.Empty : Convert.ToDateTime(date).ConvertDate();&#xD;&#xA;        }&#xD;&#xA;        private static string ConvertToString(object value)&#xD;&#xA;        {&#xD;&#xA;            return Convert.ToString(ReturnEmptyIfNull(value));&#xD;&#xA;        }&#xD;&#xA;        private static int ConvertToInt(object value)&#xD;&#xA;        {&#xD;&#xA;            return Convert.ToInt32(ReturnZeroIfNull(value));&#xD;&#xA;        }&#xD;&#xA;        private static long ConvertToLong(object value)&#xD;&#xA;        {&#xD;&#xA;            return Convert.ToInt64(ReturnZeroIfNull(value));&#xD;&#xA;        }&#xD;&#xA;        private static decimal ConvertToDecimal(object value)&#xD;&#xA;        {&#xD;&#xA;            return Convert.ToDecimal(ReturnZeroIfNull(value));&#xD;&#xA;        }&#xD;&#xA;        private static DateTime convertToDateTime(object date)&#xD;&#xA;        {&#xD;&#xA;            return Convert.ToDateTime(ReturnDateTimeMinIfNull(date));&#xD;&#xA;        }&#xD;&#xA;        public static string ConvertDate(this DateTime datetTime, bool excludeHoursAndMinutes = false)&#xD;&#xA;        {&#xD;&#xA;            if (datetTime != DateTime.MinValue)&#xD;&#xA;            {&#xD;&#xA;                if (excludeHoursAndMinutes)&#xD;&#xA;                    return datetTime.ToString(""""""""yyyy-MM-dd"""""""");&#xD;&#xA;                return datetTime.ToString(""""""""yyyy-MM-dd HH:mm:ss.fff"""""""");&#xD;&#xA;            }&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        public static object ReturnEmptyIfNull(this object value)&#xD;&#xA;        {&#xD;&#xA;            if (value == DBNull.Value)&#xD;&#xA;                return string.Empty;&#xD;&#xA;            if (value == null)&#xD;&#xA;                return string.Empty;&#xD;&#xA;            return value;&#xD;&#xA;        }&#xD;&#xA;        public static object ReturnZeroIfNull(this object value)&#xD;&#xA;        {&#xD;&#xA;            if (value == DBNull.Value)&#xD;&#xA;                return 0;&#xD;&#xA;            if (value == null)&#xD;&#xA;                return 0;&#xD;&#xA;            return value;&#xD;&#xA;        }&#xD;&#xA;        public static object ReturnDateTimeMinIfNull(this object value)&#xD;&#xA;        {&#xD;&#xA;            if (value == DBNull.Value)&#xD;&#xA;                return DateTime.MinValue;&#xD;&#xA;            if (value == null)&#xD;&#xA;                return DateTime.MinValue;&#xD;&#xA;            return value;&#xD;&#xA;        }&#xD;&#xA;    }"
