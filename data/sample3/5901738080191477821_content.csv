"Content"
"    #include <algorithm>&#xD;&#xA;    #include <cctype>&#xD;&#xA;    #include <iterator>&#xD;&#xA;    #include <fstream>&#xD;&#xA;    #include <iostream>&#xD;&#xA;    #include <vector>&#xD;&#xA;    #include <string>&#xD;&#xA;    #include <sstream>&#xD;&#xA;    &#xD;&#xA;    using namespace std;&#xD;&#xA;    &#xD;&#xA;    // Edited: added struct (wilhelmtell's advice)&#xD;&#xA;    struct not_digit_and_not_whitespace {&#xD;&#xA;        bool operator()(char c) const {&#xD;&#xA;            return ! std::isdigit(c) && ! std::isspace(c);&#xD;&#xA;        }&#xD;&#xA;    };&#xD;&#xA;    &#xD;&#xA;    int main()&#xD;&#xA;    {&#xD;&#xA;        system(""""""""pwd"""""""");&#xD;&#xA;    &#xD;&#xA;        std::string line;&#xD;&#xA;        const std::string fileName = """"""""/Users/me/test.dat"""""""";  &#xD;&#xA;    &#xD;&#xA;        ifstream theStream( fileName.c_str() ); &#xD;&#xA;    &#xD;&#xA;        if( ! theStream )&#xD;&#xA;              std::cerr << """"""""Error opening file test.dat\n"""""""";&#xD;&#xA;    &#xD;&#xA;        std::getline( theStream, line );&#xD;&#xA;        // line.erase(remove( line.begin(), line.end(), '\'' ), line.end() ); // Edited (wilhelmtell's advice)&#xD;&#xA;        line.erase(remove_if( line.begin(), line.end(),not_digit_and_not_whitespace()), line.end() );  // Edited: added (wilhelmtell's advice)&#xD;&#xA;    &#xD;&#xA;        std::istringstream myStream( line );&#xD;&#xA;        std::vector<int> numbers((std::istream_iterator<int>(myStream)), std::istream_iterator<int>());&#xD;&#xA;    &#xD;&#xA;        std::copy(numbers.begin(), numbers.end(),&#xD;&#xA;                  std::ostream_iterator<int>(std::cout, """"""""\n""""""""));&#xD;&#xA;    &#xD;&#xA;        /* int temp;  // Edited: wilhemtell suggested using iterators instead.&#xD;&#xA;        while ( myStream >> temp ){&#xD;&#xA;            numbers.push_back( temp );&#xD;&#xA;         std::cout << temp << std::endl;&#xD;&#xA;        }*/&#xD;&#xA;        return 0;&#xD;&#xA;    }"
